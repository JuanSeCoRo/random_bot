# This example requires the 'members' and 'message_content' privileged intents to function.

import discord
from discord.ext import commands
from main import gen_pass
import random
import os
import requests
description = '''An example bot to showcase the discord.ext.commands extension
module.

There are a number of utility commands being showcased here.'''

class MyClient(discord.Client):
    async def on_ready(self):
        print(f'Logged in as {self.user} (ID: {self.user.id})')
        print('------')

    async def on_member_join(self, member):
        guild = member.guild
        if guild.system_channel is not None:
            to_send = f'Welcome {member.mention} to {guild.name}!'
            await guild.system_channel.send(to_send)

intents = discord.Intents.default()
client = MyClient(intents=intents)
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix='/', description=description, intents=intents)


@bot.command()
async def add(ctx, left: int, right: int):
    """Adds two numbers together."""
    await ctx.send(left + right)


@bot.command()
async def roll(ctx, dice: str):
    """Rolls a dice in NdN format."""
    try:
        rolls, limit = map(int, dice.split('d'))
    except Exception:
        await ctx.send('Format has to be in NdN!')
        return

    result = ', '.join(str(random.randint(1, limit)) for r in range(rolls))
    await ctx.send(result)

@bot.command()
async def password(ctx, num: int):
    await ctx.send(gen_pass(num))

@bot.command()
async def tip(ctx, object):
    tips = [
        "Reducir los envases o productos de usar y tirar. El catálogo de acciones que se pueden realizar es infinito: desde optar con el consumo de productos a granel, hasta optar por productos envasados en materiales que después se pueden reciclar con mayor facilidad: papel o cartón o vidrio.",
        "Reducir el despilfarro de alimentos.  Comprando sólo lo que necesitamos, cuidando la conservación y preparación de alimentos, aprovechando las sobras para hacer nuevas recetas y optando por el compostaje orgánico en alguna de sus múltiples opciones: 4º contenedor, compostaje doméstico, compostaje comunitario, etc. ",
        "Decantarnos preferiblemente por productos de origen reciclado. De esta forma reducimos la necesidad de extraer materiales nuevos de la naturaleza y/o destinar recursos energéticos para procesarlos. ",
        "Seleccionar materiales más respetuosos con el medioambiente y con mayor vida útil. Evita los productos lowcost. Por ejemplo, si optamos por materiales textiles con más durabilidad y mejor rendimiento, reducimos la producción de textiles y, sobretodo, la cantidad de ropa que tiramos a la basura por ser ya inservible.",
        "Busca formas de reutilizar los recursos textiles antes de desecharlos. Conviértelos en trapos, utilízalos para hacer manualidades, como envoltorio de regalos, etc.",
        "Opta por la reparación de objetos. Siempre que sea posible, y económicamente viable, es preferible optar por alargar la vida útil de los objetos. ",
        "Copia buenas prácticas para reutilizar residuos. Ahora que todo se ha hecho virtual, la red nos proporciona estupendos recursos para tener ideas. Pinterest, páginas como el-recetario.net o personas como 2ndfunniestthing son referentes para esta tarea. ",
        "Al depositar los residuos, debemos asegurarnos de hacerlo en el contenedor adecuado. Ante las dudas, acudir a herramientas que facilitan la resolución de las mismas como el buscador AIRE  o el propio de la Mancomunidad de la Comarca de Pamplona.",
        "Visitar plantas de separación y reciclaje. Acercarnos a estas instalaciones no solo nos acerca a los procesos de tratamiento de residuos, sino que nos acerca a los beneficios socioeconómicos y medioambientales de su reciclaje."
        ]
    await ctx.send(random.choice(tips))
    
@bot.command()
async def meme(ctx):
    imagen = random.choice( os.listdir("images") )
    with open(f'images/{imagen}', 'rb') as f:
        # ¡Vamos a almacenar el archivo de la biblioteca Discord convertido en esta variable!
        picture = discord.File(f)
    # A continuación, podemos enviar este archivo como parámetro.
    await ctx.send(file=picture)

containers = {

    "Orange": [
        "Remains of raw or cooked fruits and vegetables",
        "Remains of cooked meat",
        "Remains fish or shellfish",
        "Remains of pasta",
        "Remains of rice",
        "Egg shells",
        "Used napkins",
        "Kitchen paper"

    ],

    "Gray": [
       "Toys",  
       "Pacifiers", 
       "Kitchen Utensils", 
       "Diapers", 
       "Ceramic Objects", 
       "Pet sand", 
       "Hair", 
       "Dust"
    ],

    "Yellow": [
        "Plastic",
        "Metal Foil", 
        "Aluminum Foil", 
        "Aerosol", 
        "Yogurt Container", 
        "Toothpaste Tube"
    ],

    "Green": [
        "Bottle of Wine",
        "Water", 
        "Juice", 
        "Beer", 
        "Any other Liquid"
        "Jars of Jams", 
        "Honey", 
        "Cosmetics", 
        "Cologne"
        "Perfume Bottles", 
        "Deodorants"   
    ],

    "Blue": [
        "Notebook", 
        "Newspaper", 
        "Magazine", 
        "Wrapping paper",  
        "Envelope", 
        "Advertising Brochure", 
        "Cardboard", 
        "Paper Bag", 
        "Cereal Box",
        "Cardboard Piece",
        "Container for Cereals", 
        "Container for Cookies", 
        "Container for Pre-cooked and Frozen meals",
        "Container for fast food", 
        "Container for shoes",
        "Cardboard Egg Cup", 
        "Cardboard Tube from toilet paper or",
        "Cardboard Tube from kitchen napkins"
    ],

    "Red": [
        "Batteries", 
        "Televisions", 
        "broken phones", 
        "Appliances in General", 
        "Motor oils", 
        "Hospital Waste",
        "Chemical Products"
    ]



}

@bot.command()
async def recycling_containers(ctx, object):
    if object.lower() in containers["Orange"]:
        await ctx.send(object + "must go in the Orange container")
    elif object.lower() in containers["Green"]:
        await ctx.send(object + "must go in the Green container")
    elif object.lower() in containers["Yellow"]:
        await ctx.send(object + "must go in the Yellow container")
    elif object.lower() in containers["Blue"]:
        await ctx.send(object + "must go in the Blue container") 
    elif object.lower() in containers["Red"]:
        await ctx.send(object + "must go in the Red container")
    elif object.lower() in containers["Gray"]:
        await ctx.send(object + "must go in the Gray container") 

@bot.command()
async def play(ctx):
    ran_container = random.choice(containers.keys())
    await ctx.send(random.choice(containers[ran_container]))
    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel
    try:
        response = await bot.wait_for('message', timeout = 30.0, check = check)

        if response.content == ran_container:
            await ctx.send("Correct!")
        else:
            await ctx.send('Incorrect! The right one was:' + ran_container)
    
    except:
        await ctx.send("You ran out of time! Try again")
    
def get_duck_image_url():    
    url = 'https://random-d.uk/api/random'
    res = requests.get(url)
    data = res.json()
    return data['url']

@bot.command('duck')
async def duck(ctx):
    '''Una vez que llamamos al comando duck, 
    el programa llama a la función get_duck_image_url'''
    image_url = get_duck_image_url()
    await ctx.send(image_url)

@bot.command(description = 'For when you wanna settle the score some other way')
async def choose(ctx, *choices: str):
    """Chooses between multiple choices."""
    await ctx.send(random.choice(choices))


@bot.command()
async def repeat(ctx, times: int, content='repeating...'):
    """Repeats a message multiple times."""
    for i in range(times):
        await ctx.send(content)

@bot.group()
async def cool(ctx):
    """Says if a user is cool.

    In reality this just checks if a subcommand is being invoked.
    """
    if ctx.invoked_subcommand is None:
        await ctx.send(f'No, {ctx.subcommand_passed} is not cool')


@cool.command(name='bot')
async def _bot(ctx):
    """Is the bot cool?"""
    await ctx.send('Yes, the bot is cool.')

@bot.command()
async def joined(ctx, member: discord.Member):
    """Says when a member joined."""
    await ctx.send(f'{member.name} joined {discord.utils.format_dt(member.joined_at)}')


bot.run('Token')
